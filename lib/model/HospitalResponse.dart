
import 'dart:convert';

HospitalResponse hospitalResponseFromJson(String str) => HospitalResponse.fromJson(json.decode(str));

String hospitalResponseToJson(HospitalResponse data) => json.encode(data.toJson());

class HospitalResponse {
  String saveStatus;
  List<dynamic> hospitalResponseShowMessages;
  List<dynamic> hospitalResponseShowObjectList;
  bool isShowMsgNull;
  int warningCode;
  String errorMsg;
  String warningMsg;
  int errorCode;
  bool isNewInfo;
  bool uIsErrorCode;
  List<Return> returns;
  dynamic guid;
  dynamic requestId;
  bool isSuccess;
  int state;
  dynamic message;
  dynamic showMsg;
  bool uIsShowMsgNull;
  List<dynamic> showObjectList;
  List<dynamic> showMessages;

  HospitalResponse({
    required this.saveStatus,
    required this.hospitalResponseShowMessages,
    required this.hospitalResponseShowObjectList,
    required this.isShowMsgNull,
    required this.warningCode,
    required this.errorMsg,
    required this.warningMsg,
    required this.errorCode,
    required this.isNewInfo,
    required this.uIsErrorCode,
    required this.returns,
    required this.guid,
    required this.requestId,
    required this.isSuccess,
    required this.state,
    required this.message,
    required this.showMsg,
    required this.uIsShowMsgNull,
    required this.showObjectList,
    required this.showMessages,
  });

  factory HospitalResponse.fromJson(Map<String, dynamic> json) => HospitalResponse(
    saveStatus: json["_saveStatus"],
    hospitalResponseShowMessages: List<dynamic>.from(json["_showMessages"].map((x) => x)),
    hospitalResponseShowObjectList: List<dynamic>.from(json["_showObjectList"].map((x) => x)),
    isShowMsgNull: json["_isShowMsgNull"],
    warningCode: json["WarningCode"],
    errorMsg: json["ErrorMsg"],
    warningMsg: json["WarningMsg"],
    errorCode: json["ErrorCode"],
    isNewInfo: json["IsNewInfo"],
    uIsErrorCode: json["u_IsErrorCode"],
    returns: List<Return>.from(json["Returns"].map((x) => Return.fromJson(x))),
    guid: json["GUID"],
    requestId: json["RequestID"],
    isSuccess: json["IsSuccess"],
    state: json["State"],
    message: json["Message"],
    showMsg: json["ShowMsg"],
    uIsShowMsgNull: json["u_IsShowMsgNull"],
    showObjectList: List<dynamic>.from(json["ShowObjectList"].map((x) => x)),
    showMessages: List<dynamic>.from(json["ShowMessages"].map((x) => x)),
  );

  Map<String, dynamic> toJson() => {
    "_saveStatus": saveStatus,
    "_showMessages": List<dynamic>.from(hospitalResponseShowMessages.map((x) => x)),
    "_showObjectList": List<dynamic>.from(hospitalResponseShowObjectList.map((x) => x)),
    "_isShowMsgNull": isShowMsgNull,
    "WarningCode": warningCode,
    "ErrorMsg": errorMsg,
    "WarningMsg": warningMsg,
    "ErrorCode": errorCode,
    "IsNewInfo": isNewInfo,
    "u_IsErrorCode": uIsErrorCode,
    "Returns": List<dynamic>.from(returns.map((x) => x.toJson())),
    "GUID": guid,
    "RequestID": requestId,
    "IsSuccess": isSuccess,
    "State": state,
    "Message": message,
    "ShowMsg": showMsg,
    "u_IsShowMsgNull": uIsShowMsgNull,
    "ShowObjectList": List<dynamic>.from(showObjectList.map((x) => x)),
    "ShowMessages": List<dynamic>.from(showMessages.map((x) => x)),
  };
}

class Return {
  dynamic ountryName;
  dynamic shopWebsite;
  String introduce;
  int id;
  bool isEnableInventory;
  bool isEnableFreshInventory;
  String reportTitle;
  bool isInterUmp;
  bool isInterface;
  dynamic bsSpeciaNameLists;
  dynamic bsSpeciaIdLists;
  String code;
  String name;
  String areaId;
  String pyCode;
  String wbCode;
  int orderBy;
  bool isActive;
  double area;
  double farthest;
  String address;
  String phone;
  String email;
  int residentPopulation;
  int tentPopulation;
  String memo;
  int iconIndex;
  String centralCode;
  String medicalCode;
  String regionId;
  String provinceId;
  String userId;
  String engDesc;
  String manageUser;
  bool isAudit;
  String cashierReport;
  dynamic unionName;
  dynamic areaStr;
  dynamic regIonStr;
  dynamic provinceStr;
  bool isSelect;
  String unionId;
  dynamic userName;
  int oralType;
  double score;
  String accountName;
  String accountNum;
  String openingBank;
  String registerCode;
  String licenseCode;
  String signBoard;
  String lat;
  String lng;
  String signedNo;
  dynamic signedHtml;
  String lsSigned;
  DateTime insertTime;
  DateTime freezeTime;
  DateTime unfreezeTime;
  String freezeMemo;
  String legalidCardNo;
  String prinPhone;
  String legalMobile;
  String legalEmail;
  String bankBranchName;
  String bankAcctName;
  String bankNo;
  String bankAreaId;
  String bankRegionId;
  String bankProvinceId;
  String bankAcctType;
  String shopAddr;
  String shopHouseNo;
  String lsRegmer;
  String lsLicense;
  dynamic license;
  String mcHuserId;
  dynamic certificate;
  String permit;
  String hospPhoto;
  String facadePhoto;
  String fstbankInfo;
  String sndbankInfo;
  String itemPhoto;
  String indoorPhoto;
  String frontidCard;
  String reverseidCard;
  String handheldidCard;
  String subCode;
  dynamic intro;
  dynamic image;
  dynamic legalHandHeldidCard;
  String pracertificate;
  String saaSId;
  String hisTypeStr;
  String businessHours;
  bool isOpenBusiness;
  String logoPath;
  bool isAlone;
  bool isenablefreshinventory;
  String contrastCode;
  bool isModify;
  String guid;
  bool uIsGuidNull;
  int hospitalId;
  int rowStatus;
  int hisType;
  bool uIsHasRecord;
  bool uIsNoRecord;
  bool uIsNotPatIdNull;
  dynamic redisConditionValus;
  dynamic diagMeetingLocId;
  int sortOrder;
  DateTime inputTime;
  String strTemp;
  String strTemp1;
  bool isSelected;

  Return({
    required this.ountryName,
    required this.shopWebsite,
    required this.introduce,
    required this.id,
    required this.isEnableInventory,
    required this.isEnableFreshInventory,
    required this.reportTitle,
    required this.isInterUmp,
    required this.isInterface,
    required this.bsSpeciaNameLists,
    required this.bsSpeciaIdLists,
    required this.code,
    required this.name,
    required this.areaId,
    required this.pyCode,
    required this.wbCode,
    required this.orderBy,
    required this.isActive,
    required this.area,
    required this.farthest,
    required this.address,
    required this.phone,
    required this.email,
    required this.residentPopulation,
    required this.tentPopulation,
    required this.memo,
    required this.iconIndex,
    required this.centralCode,
    required this.medicalCode,
    required this.regionId,
    required this.provinceId,
    required this.userId,
    required this.engDesc,
    required this.manageUser,
    required this.isAudit,
    required this.cashierReport,
    required this.unionName,
    required this.areaStr,
    required this.regIonStr,
    required this.provinceStr,
    required this.isSelect,
    required this.unionId,
    required this.userName,
    required this.oralType,
    required this.score,
    required this.accountName,
    required this.accountNum,
    required this.openingBank,
    required this.registerCode,
    required this.licenseCode,
    required this.signBoard,
    required this.lat,
    required this.lng,
    required this.signedNo,
    required this.signedHtml,
    required this.lsSigned,
    required this.insertTime,
    required this.freezeTime,
    required this.unfreezeTime,
    required this.freezeMemo,
    required this.legalidCardNo,
    required this.prinPhone,
    required this.legalMobile,
    required this.legalEmail,
    required this.bankBranchName,
    required this.bankAcctName,
    required this.bankNo,
    required this.bankAreaId,
    required this.bankRegionId,
    required this.bankProvinceId,
    required this.bankAcctType,
    required this.shopAddr,
    required this.shopHouseNo,
    required this.lsRegmer,
    required this.lsLicense,
    required this.license,
    required this.mcHuserId,
    required this.certificate,
    required this.permit,
    required this.hospPhoto,
    required this.facadePhoto,
    required this.fstbankInfo,
    required this.sndbankInfo,
    required this.itemPhoto,
    required this.indoorPhoto,
    required this.frontidCard,
    required this.reverseidCard,
    required this.handheldidCard,
    required this.subCode,
    required this.intro,
    required this.image,
    required this.legalHandHeldidCard,
    required this.pracertificate,
    required this.saaSId,
    required this.hisTypeStr,
    required this.businessHours,
    required this.isOpenBusiness,
    required this.logoPath,
    required this.isAlone,
    required this.isenablefreshinventory,
    required this.contrastCode,
    required this.isModify,
    required this.guid,
    required this.uIsGuidNull,
    required this.hospitalId,
    required this.rowStatus,
    required this.hisType,
    required this.uIsHasRecord,
    required this.uIsNoRecord,
    required this.uIsNotPatIdNull,
    required this.redisConditionValus,
    required this.diagMeetingLocId,
    required this.sortOrder,
    required this.inputTime,
    required this.strTemp,
    required this.strTemp1,
    required this.isSelected,
  });

  factory Return.fromJson(Map<String, dynamic> json) => Return(
    ountryName: json["_ountryName"],
    shopWebsite: json["ShopWebsite"],
    introduce: json["Introduce"],
    id: json["ID"],
    isEnableInventory: json["IsEnableInventory"],
    isEnableFreshInventory: json["IsEnableFreshInventory"],
    reportTitle: json["ReportTitle"],
    isInterUmp: json["IsInterUMP"],
    isInterface: json["IsInterface"],
    bsSpeciaNameLists: json["BsSpeciaNameLists"],
    bsSpeciaIdLists: json["BsSpeciaIDLists"],
    code: json["Code"],
    name: json["Name"],
    areaId: json["AreaId"],
    pyCode: json["PyCode"],
    wbCode: json["WbCode"],
    orderBy: json["OrderBy"],
    isActive: json["IsActive"],
    area: json["Area"],
    farthest: json["Farthest"],
    address: json["Address"],
    phone: json["Phone"],
    email: json["Email"],
    residentPopulation: json["ResidentPopulation"],
    tentPopulation: json["TentPopulation"],
    memo: json["Memo"],
    iconIndex: json["IconIndex"],
    centralCode: json["CentralCode"],
    medicalCode: json["MedicalCode"],
    regionId: json["RegionId"],
    provinceId: json["ProvinceId"],
    userId: json["UserId"],
    engDesc: json["EngDesc"],
    manageUser: json["ManageUser"],
    isAudit: json["IsAudit"],
    cashierReport: json["CashierReport"],
    unionName: json["UnionName"],
    areaStr: json["AreaStr"],
    regIonStr: json["RegIonStr"],
    provinceStr: json["ProvinceStr"],
    isSelect: json["IsSelect"],
    unionId: json["UnionId"],
    userName: json["UserName"],
    oralType: json["OralType"],
    score: json["Score"],
    accountName: json["AccountName"],
    accountNum: json["AccountNum"],
    openingBank: json["OpeningBank"],
    registerCode: json["RegisterCode"],
    licenseCode: json["LicenseCode"],
    signBoard: json["SignBoard"],
    lat: json["Lat"],
    lng: json["Lng"],
    signedNo: json["SignedNo"],
    signedHtml: json["SignedHtml"],
    lsSigned: json["LsSigned"],
    insertTime: DateTime.parse(json["InsertTime"]),
    freezeTime: DateTime.parse(json["FreezeTime"]),
    unfreezeTime: DateTime.parse(json["UnfreezeTime"]),
    freezeMemo: json["FreezeMemo"],
    legalidCardNo: json["LegalidCardNo"],
    prinPhone: json["PrinPhone"],
    legalMobile: json["LegalMobile"],
    legalEmail: json["LegalEmail"],
    bankBranchName: json["BankBranchName"],
    bankAcctName: json["BankAcctName"],
    bankNo: json["BankNo"],
    bankAreaId: json["BankAreaId"],
    bankRegionId: json["BankRegionId"],
    bankProvinceId: json["BankProvinceId"],
    bankAcctType: json["BankAcctType"],
    shopAddr: json["ShopAddr"],
    shopHouseNo: json["ShopHouseNo"],
    lsRegmer: json["LsRegmer"],
    lsLicense: json["LsLicense"],
    license: json["License"],
    mcHuserId: json["McHuserId"],
    certificate: json["Certificate"],
    permit: json["Permit"],
    hospPhoto: json["HospPhoto"],
    facadePhoto: json["FacadePhoto"],
    fstbankInfo: json["FstbankInfo"],
    sndbankInfo: json["SndbankInfo"],
    itemPhoto: json["ItemPhoto"],
    indoorPhoto: json["IndoorPhoto"],
    frontidCard: json["FrontidCard"],
    reverseidCard: json["ReverseidCard"],
    handheldidCard: json["HandheldidCard"],
    subCode: json["SubCode"],
    intro: json["Intro"],
    image: json["Image"],
    legalHandHeldidCard: json["LegalHandHeldidCard"],
    pracertificate: json["Pracertificate"],
    saaSId: json["SaaSId"],
    hisTypeStr: json["HisTypeStr"],
    businessHours: json["BusinessHours"],
    isOpenBusiness: json["IsOpenBusiness"],
    logoPath: json["LogoPath"],
    isAlone: json["IsAlone"],
    isenablefreshinventory: json["Isenablefreshinventory"],
    contrastCode: json["ContrastCode"],
    isModify: json["IsModify"],
    guid: json["GUID"],
    uIsGuidNull: json["u_IsGUIDNull"],
    hospitalId: json["HospitalId"],
    rowStatus: json["RowStatus"],
    hisType: json["HisType"],
    uIsHasRecord: json["u_IsHasRecord"],
    uIsNoRecord: json["u_IsNoRecord"],
    uIsNotPatIdNull: json["u_isNotPatIDNull"],
    redisConditionValus: json["RedisConditionValus"],
    diagMeetingLocId: json["DiagMeetingLocId"],
    sortOrder: json["SortOrder"],
    inputTime: DateTime.parse(json["InputTime"]),
    strTemp: json["StrTemp"],
    strTemp1: json["StrTemp1"],
    isSelected: json["IsSelected"],
  );

  Map<String, dynamic> toJson() => {
    "_ountryName": ountryName,
    "ShopWebsite": shopWebsite,
    "Introduce": introduce,
    "ID": id,
    "IsEnableInventory": isEnableInventory,
    "IsEnableFreshInventory": isEnableFreshInventory,
    "ReportTitle": reportTitle,
    "IsInterUMP": isInterUmp,
    "IsInterface": isInterface,
    "BsSpeciaNameLists": bsSpeciaNameLists,
    "BsSpeciaIDLists": bsSpeciaIdLists,
    "Code": code,
    "Name": name,
    "AreaId": areaId,
    "PyCode": pyCode,
    "WbCode": wbCode,
    "OrderBy": orderBy,
    "IsActive": isActive,
    "Area": area,
    "Farthest": farthest,
    "Address": address,
    "Phone": phone,
    "Email": email,
    "ResidentPopulation": residentPopulation,
    "TentPopulation": tentPopulation,
    "Memo": memo,
    "IconIndex": iconIndex,
    "CentralCode": centralCode,
    "MedicalCode": medicalCode,
    "RegionId": regionId,
    "ProvinceId": provinceId,
    "UserId": userId,
    "EngDesc": engDesc,
    "ManageUser": manageUser,
    "IsAudit": isAudit,
    "CashierReport": cashierReport,
    "UnionName": unionName,
    "AreaStr": areaStr,
    "RegIonStr": regIonStr,
    "ProvinceStr": provinceStr,
    "IsSelect": isSelect,
    "UnionId": unionId,
    "UserName": userName,
    "OralType": oralType,
    "Score": score,
    "AccountName": accountName,
    "AccountNum": accountNum,
    "OpeningBank": openingBank,
    "RegisterCode": registerCode,
    "LicenseCode": licenseCode,
    "SignBoard": signBoard,
    "Lat": lat,
    "Lng": lng,
    "SignedNo": signedNo,
    "SignedHtml": signedHtml,
    "LsSigned": lsSigned,
    "InsertTime": insertTime.toIso8601String(),
    "FreezeTime": freezeTime.toIso8601String(),
    "UnfreezeTime": unfreezeTime.toIso8601String(),
    "FreezeMemo": freezeMemo,
    "LegalidCardNo": legalidCardNo,
    "PrinPhone": prinPhone,
    "LegalMobile": legalMobile,
    "LegalEmail": legalEmail,
    "BankBranchName": bankBranchName,
    "BankAcctName": bankAcctName,
    "BankNo": bankNo,
    "BankAreaId": bankAreaId,
    "BankRegionId": bankRegionId,
    "BankProvinceId": bankProvinceId,
    "BankAcctType": bankAcctType,
    "ShopAddr": shopAddr,
    "ShopHouseNo": shopHouseNo,
    "LsRegmer": lsRegmer,
    "LsLicense": lsLicense,
    "License": license,
    "McHuserId": mcHuserId,
    "Certificate": certificate,
    "Permit": permit,
    "HospPhoto": hospPhoto,
    "FacadePhoto": facadePhoto,
    "FstbankInfo": fstbankInfo,
    "SndbankInfo": sndbankInfo,
    "ItemPhoto": itemPhoto,
    "IndoorPhoto": indoorPhoto,
    "FrontidCard": frontidCard,
    "ReverseidCard": reverseidCard,
    "HandheldidCard": handheldidCard,
    "SubCode": subCode,
    "Intro": intro,
    "Image": image,
    "LegalHandHeldidCard": legalHandHeldidCard,
    "Pracertificate": pracertificate,
    "SaaSId": saaSId,
    "HisTypeStr": hisTypeStr,
    "BusinessHours": businessHours,
    "IsOpenBusiness": isOpenBusiness,
    "LogoPath": logoPath,
    "IsAlone": isAlone,
    "Isenablefreshinventory": isenablefreshinventory,
    "ContrastCode": contrastCode,
    "IsModify": isModify,
    "GUID": guid,
    "u_IsGUIDNull": uIsGuidNull,
    "HospitalId": hospitalId,
    "RowStatus": rowStatus,
    "HisType": hisType,
    "u_IsHasRecord": uIsHasRecord,
    "u_IsNoRecord": uIsNoRecord,
    "u_isNotPatIDNull": uIsNotPatIdNull,
    "RedisConditionValus": redisConditionValus,
    "DiagMeetingLocId": diagMeetingLocId,
    "SortOrder": sortOrder,
    "InputTime": inputTime.toIso8601String(),
    "StrTemp": strTemp,
    "StrTemp1": strTemp1,
    "IsSelected": isSelected,
  };
}
